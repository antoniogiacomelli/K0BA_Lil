V1.1.0 [31/10/24]

The last updates led to an increase in the major version number.

* Major changes: affected the API and implementations.

 - Refactored Mailbox Mechanism. 
	- Mail has a fixed size and is stored within the mailbox structure.
  	- The receiver passes a double pointer to the kMailboxPend() method. This double pointer is dereferenced to store the mail address within the Mailbox, avoiding
	 a deep copy.  This enhances the lightweight purpose of the mechanism. Passing a pointer to receive the size of the message is optional. The default is 4-byte.
	 A maximum size is fixed for all mailboxes.
	
	 Observations: If you want to exchange messages larger than 4-byte, a Message Queue is a more appropriate choice, even if you declare it a with single item
		       capacity. For messages with less than 4 bytes, you are better off using a local-global with mutexes for lock and semaphores for synchronisation, or a 
                       simple FIFO. 

 - Introduced Byte Pools. 
	This mechanism allows the dynamic allocation of chunks in a byte pool in addition to dynamically allocating fixed-size blocks.
  	The maximum size is 255 - which, in practice, provides 254 bytes for a given pool. Caution is needed on the usage. Allocate bytes that are multiples of the 
    	pool size. Allocate and free the exact size for each chunk. Allocate/Use/Free on a unidirectional order.

 

Minor changes:

  - The file structure went through a small reorganisation. 
  - Interfaces not meant for direct use of the application were removed from the public API. 
  - K_CONF_ macros were renamed to K_DEF_. 
  - API documentation was improved.  
  -                   
